#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    chalk = require('chalk'),
    doxdox = require('..');

var config = {
    title: '',
    description: '',
    layout: 'bootstrap'
};

var input = process.cwd(),
    output,
    pkg;

var args = process.argv.slice(2);

if (args.length && !args[0].match(/^\-/)) {

    input = args.shift();

}

while (args.length) {

    switch (args.shift()) {

    case '-t':
    case '--title':
        config.title = args.shift();
        break;

    case '-d':
    case '--description':
        config.description = args.shift();
        break;

    case '-l':
    case '--layout':
        config.layout = args.shift();
        break;

    case '-p':
    case '--package':
        pkg = args.shift();
        break;

    case '-o':
    case '--output':
        output = args.shift();
        break;

    case '-v':
    case '--version':
        process.stdout.write(require('../package').version + '\n');
        process.kill();
        break;

    default:
        process.stdout.write('\n');
        process.stdout.write(chalk.blue(' Usage:') + ' doxdox <file> [options]' + '\n\n');
        process.stdout.write(' Options:' + '\n\n');
        process.stdout.write(chalk.yellow('  -h, --help') + '\t\tDisplay this help message.' + '\n');
        process.stdout.write(chalk.yellow('  -v, --version') + '\t\tDisplay the current installed version.' + '\n');
        process.stdout.write(chalk.yellow('  -t, --title') + '\t\tSets title.' + '\n');
        process.stdout.write(chalk.yellow('  -d, --description') + '\tSets description.' + '\n');
        process.stdout.write(chalk.yellow('  -p, --package') + '\tSets location of package.json file.' + '\n');
        process.stdout.write(chalk.yellow('  -l, --layout') + '\t\tTemplate to render the documentation with.' + '\n');
        process.stdout.write(chalk.yellow('  -o, --output') + '\t\tFile to save documentation to. Default to stdout.' + '\n');
        process.stdout.write('\n');
        process.stdout.write(' Available Layouts:' + '\n\n');
        process.stdout.write('  - Bootstrap (default)\t  (http://getbootstrap.com/)' + '\n');
        process.stdout.write('  - Markdown\t\t  (http://daringfireball.net/projects/markdown/)' + '\n');
        process.stdout.write('\n');
        process.kill();
        break;

    }

}

var stat;

if (!pkg && fs.existsSync(input)) {

    stat = fs.statSync(input);

    if (stat.isDirectory()) {

        pkg = path.normalize(input + '/package.json');

    } else if (stat.isFile()) {

        pkg = path.normalize(path.dirname(input) + '/package.json');

    }

}

if (fs.existsSync(pkg)) {

    pkg = require(pkg);

    if (pkg.name && !config.title) {

        config.title = pkg.name;

    }

    if (pkg.description && !config.description) {

        config.description = pkg.description;

    }

}

if (!config.title) {

    config.title = 'Untitled Project';

}

doxdox.parseInput(input, output, config);
