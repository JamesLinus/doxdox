#!/usr/bin/env node

var pkg = require('../package'),
    chalk = require('chalk'),
    doxdox = require('..');

var config = {
    title: 'Untitled Project',
    description: '',
    layout: 'bootstrap'
};

var input = __dirname,
    output;

var args = process.argv.slice(2),
    value;

if (args.length && !args[0].match(/^\-/)) {

    input = args.shift();

}

while (args.length) {

    value = args.shift();

    switch (value) {

    case '-t':
    case '--title':
        config.title = args.shift();
        break;

    case '-d':
    case '--description':
        config.description = args.shift();
        break;

    case '-l':
    case '--layout':
        config.layout = args.shift();
        break;

    case '-o':
    case '--output':
        output = args.shift();
        break;

    case '-v':
    case '--version':
        process.stdout.write(pkg.version + '\n');
        process.kill();
        break;

    default:
        process.stdout.write('\n');
        process.stdout.write(chalk.blue(' Usage:') + ' doxdox <file> [options]' + '\n\n');
        process.stdout.write(' Options:' + '\n\n');
        process.stdout.write(chalk.yellow('  -h, --help') + '\t\tDisplay this help message.' + '\n');
        process.stdout.write(chalk.yellow('  -v, --version') + '\t\tDisplay the current installed version.' + '\n');
        process.stdout.write(chalk.yellow('  -t, --title') + '\t\tSets title.' + '\n');
        process.stdout.write(chalk.yellow('  -d, --description') + '\tSets description.' + '\n');
        process.stdout.write(chalk.yellow('  -l, --layout') + '\t\tTemplate to render the documentation with.' + '\n');
        process.stdout.write(chalk.yellow('  -o, --output') + '\t\tFile to save documentation to. Default to stdout.' + '\n');
        process.stdout.write('\n');
        process.stdout.write(' Available Layouts:' + '\n\n');
        process.stdout.write('  - Bootstrap (default)\t  (http://getbootstrap.com/)' + '\n');
        process.stdout.write('  - Markdown\t\t  (http://daringfireball.net/projects/markdown/)' + '\n');
        process.stdout.write('\n');
        process.kill();
        break;

    }

}

doxdox.parseInput(input, output, config);
