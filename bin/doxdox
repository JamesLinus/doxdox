#!/usr/bin/env node

var fs = require('fs'),
    chalk = require('chalk'),
    doxdox = require('..'),
    utils = require('../lib/utils');

var config = {
    title: '',
    description: '',
    layout: 'bootstrap'
};

var input = process.cwd(),
    output,
    pkg;

var args = process.argv.slice(2);

if (args.length && !args[0].match(/^\-/)) {

    input = args.shift();

}

while (args.length) {

    switch (args.shift()) {

    case '-t':
    case '--title':

        config.title = args.shift();

        break;

    case '-d':
    case '--description':

        config.description = args.shift();

        break;

    case '-l':
    case '--layout':

        config.layout = args.shift();

        break;

    case '-o':
    case '--output':

        output = args.shift();

        break;

    case '-p':
    case '--package':

        pkg = args.shift();

        break;

    case '-v':
    case '--version':

        process.stdout.write(require('../package').version + '\n');
        process.exit();

        break;

    default:

        process.stdout.write('\n');
        process.stdout.write(chalk.blue(' Usage:') + ' doxdox <path> [options]' + '\n\n');
        process.stdout.write(' Options:' + '\n\n');
        process.stdout.write(chalk.yellow('  -h, --help') + '\t\t\tDisplay this help message.' + '\n');
        process.stdout.write(chalk.yellow('  -v, --version') + '\t\t\tDisplay the current installed version.' + '\n');
        process.stdout.write(chalk.yellow('  -t, --title') + '\t\t\tSets title.' + '\n');
        process.stdout.write(chalk.yellow('  -d, --description') + '\t\tSets description.' + '\n');
        process.stdout.write(chalk.yellow('  -l, --layout') + '\t\t\tTemplate to render the documentation with.' + '\n');
        process.stdout.write(chalk.yellow('  -p, --package') + '\t\t\tSets location of package.json file.' + '\n');
        process.stdout.write(chalk.yellow('  -o, --output') + '\t\t\tFile to save documentation to. Defaults to stdout.' + '\n');
        process.stdout.write('\n');
        process.stdout.write(' Available Layouts:' + '\n\n');
        process.stdout.write('  - Bootstrap (default)\t\t(http://getbootstrap.com/)' + '\n');
        process.stdout.write('  - Markdown\t\t\t(http://daringfireball.net/projects/markdown/)' + '\n');
        process.stdout.write('  - Dash\t\t\t(http://kapeli.com/docsets/)' + '\n');
        process.stdout.write('  - Wiki\t\t\t(https://help.github.com/articles/about-github-wikis/)' + '\n');
        process.stdout.write('\n');
        process.exit();

        break;

    }

}

if (!pkg) {

    pkg = utils.findPackagePath(input);

}

if (fs.existsSync(pkg)) {

    pkg = require(pkg);

    if (!config.title && pkg.name) {

        config.title = pkg.name;

    }

    if (!config.description && pkg.description) {

        config.description = pkg.description;

    }

}

if (!config.title) {

    config.title = 'Untitled Project';

}

doxdox.parseInput(input, config, pkg).then(function (content) {

    if (output) {

        fs.writeFileSync(output, content, 'utf8');

    } else {

        process.stdout.write(content);

    }

});
