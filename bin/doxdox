#!/usr/bin/env node

const fs = require('fs');
const chalk = require('chalk');

const doxdox = require('../lib/doxdox');

const findPackageFileInPath = require('../lib/utils/cmd').findPackageFileInPath;

const args = require('parse-cmd-args')(null, {
    'allowMultipleInputs': true,
    'requireUserInput': true
});

if (args.flags['--version'] || args.flags['-v']) {

    process.stdout.write(`${require('../package').version}\n`);
    process.exit();

} else if (args.flags['--help'] || args.flags['-h']) {

    process.stdout.write(`
${chalk.blue(' Usage:')} doxdox <path> [options]

 Options:\n\n
${chalk.yellow('  -h, --help')}             Display this help message.
${chalk.yellow('  -v, --version')}          Display the current installed version.
${chalk.yellow('  -d, --description')}      Sets description.
${chalk.yellow('  -l, --layout')}           Template to render the documentation with.
${chalk.yellow('  -o, --output')}           File to save documentation to. Defaults to stdout.
${chalk.yellow('  -p, --package')}          Sets location of package.json file.
${chalk.yellow('  -t, --title')}            Sets title.

 Available Layouts:

  - Bootstrap (default)     (http://getbootstrap.com/)
  - Markdown                (http://daringfireball.net/projects/markdown/)
`);
    process.exit();

} else {

    let pkg = findPackageFileInPath(args.flags['--package'] || args.flags['-p']);

    if (fs.existsSync(pkg)) {

        pkg = require(pkg);

    } else {

        pkg = {};

    }

    const config = {
        'description': args.flags['--description'] || args.flags['-d'] || pkg.description || '',
        'layout': (args.flags['--layout'] || args.flags['-l'] || 'markdown').toLowerCase(),
        'parser': args.flags['--parser'] || args.flags['-r'] || 'dox',
        'title': args.flags['--title'] || args.flags['-t'] || pkg.name || 'Untitled Project'
    };

    const output = args.flags['--output'] || args.flags['-o'] || null;

    doxdox.parseInputs(args.inputs, Object.assign({}, {pkg}, config)).then(content => {

        if (output) {

            fs.writeFileSync(output, `${content.toString()}\n`, 'utf8');

        } else {

            process.stdout.write(`${content.toString()}\n`);

        }

    })
    .catch(err => {

        process.stderr.write(`${err.toString()}\n`);

    });

}
